from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.reply import get_contact_keyboard, get_admin_start_inline_keyboard, get_user_start_keyboard
from states.user_states import UserRegistration
from database.database import get_db, create_user, get_user_by_telegram_id, is_admin, get_poll_by_access_code, create_poll_response
import logging
import re
from sqlalchemy.orm import Session

common_router = Router()

@common_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db: Session):
    user = get_user_by_telegram_id(db, message.from_user.id)
    
    if is_admin(db, message.from_user.id):
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name}! üëã\n",
            reply_markup=get_admin_start_inline_keyboard()
        )
        return

    if user:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n",
            reply_markup=get_user_start_keyboard()
        )
        return

    await state.set_state(UserRegistration.waiting_for_contact)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, "
        "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_contact_keyboard()
    )

@common_router.callback_query(lambda c: c.data == "join_poll")
async def process_join_poll(callback: CallbackQuery, state: FSMContext, db: Session):
    await state.set_state(UserRegistration.waiting_for_access_code)
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø—Ä–æ—Å—É:")

@common_router.message(UserRegistration.waiting_for_access_code)
async def process_access_code(message: Message, state: FSMContext, db: Session):
    access_code = message.text.strip()
    poll = get_poll_by_access_code(db, access_code)

    if poll:
        create_poll_response(db, poll.id, message.from_user.id)
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ–ø—Ä–æ—Å—É '{poll.title}'!")
        # TODO: Add user to the poll participants list, start the poll, etc.
        await state.clear()
    else:
        await message.answer("‚ùå –û–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@common_router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
        "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )

@common_router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    await state.set_state(UserRegistration.waiting_for_contact)
    await message.answer(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, "
        "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_contact_keyboard()
    )

@common_router.message(F.contact, UserRegistration.waiting_for_contact)
async def handle_contact(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    contact = message.contact

    logging.info(
        f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}). "
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}"
    )

    if contact.user_id == user_id:
        user_info = {
            'user_id': user_id,
            'username': username,
            'phone': contact.phone_number,
            'first_name': contact.first_name,
            'last_name': contact.last_name if contact.last_name else None
        }
        
        await state.update_data(user_info=user_info)
        await state.set_state(UserRegistration.waiting_for_email)
        
        logging.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {user_info}")
        
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {contact.first_name}!\n\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
            "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        logging.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "
            f"—á—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (ID: {contact.user_id})"
        )
        
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_contact_keyboard()
        )

@common_router.message(UserRegistration.waiting_for_email)
async def handle_email(message: Message, state: FSMContext):
    email = message.text.strip()
    
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:"
        )
        return
    
    data = await state.get_data()
    user_info = data['user_info']
    user_info['email'] = email
    
    db = next(get_db())
    try:
        db_user = create_user(
            db=db,
            telegram_id=user_info['user_id'],
            username=user_info['username'],
            first_name=user_info['first_name'],
            last_name=user_info['last_name'],
            phone=user_info['phone'],
            email=email
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    await state.set_state(UserRegistration.registration_complete)

    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_info['first_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
        f"Email: {email}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–∞—Ö!"
    )
